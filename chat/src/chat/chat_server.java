/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chat;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author teodora
 */
public class chat_server extends javax.swing.JFrame {

    static ArrayList<ClientHandler> clientList = new ArrayList();
    static ArrayList<String> users = new ArrayList();
    static ServerSocket ss;
    static Socket s;
   /* static DataInputStream din;
    static DataOutputStream dout;*/
    static BufferedReader reader;
    static PrintWriter writer;
    
    public chat_server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        msg_area = new javax.swing.JTextArea();
        msg_text = new javax.swing.JTextField();
        msg_send = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server");

        msg_area.setColumns(20);
        msg_area.setRows(5);
        jScrollPane1.setViewportView(msg_area);

        msg_text.setText("jTextField1");

        msg_send.setText("jButton1");
        msg_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_sendActionPerformed(evt);
            }
        });

        jLabel1.setText("       Server");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(msg_text, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(msg_send, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(141, 141, 141)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(msg_text, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(msg_send, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(5, 5, 5)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void msg_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_sendActionPerformed
        try{
            String msgout = "";
        
            msgout = msg_text.getText().trim();
            /*ovde treba da saljem ka svim klijentima*/
            /*dout.writeUTF(msgout);*/
            sendToAll("Chat:"+msgout);
            
            
        }catch(Exception e){
        
        }
    }//GEN-LAST:event_msg_sendActionPerformed

    public static void sendToAll(String message){
        
       for(ClientHandler client : clientList)
            client.write(message);
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* ----------- ovo je sam generisao -----------------------*/
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(chat_server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(chat_server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(chat_server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(chat_server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new chat_server().setVisible(true);
            }
        });
        
        /* ------------ prethodno je sam napravio, moj kod krece odavde ---------------- */
        String msgin = "";
        ClientHandler client;
        try {
            ss = new ServerSocket(7000); //server pocinje na portu 7000
        } catch (IOException ex) {
            Logger.getLogger(chat_server.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        while(true){
            try{
            
                s = ss.accept();   //server prihvata konekciju
            
                System.out.println("Novi klijent se konektuje: " + s);
                
                InputStreamReader isReader = new InputStreamReader(s.getInputStream());
                reader = new BufferedReader(isReader);
                writer = new PrintWriter(s.getOutputStream());
                
                System.out.println("Dodeljuje se nit klijentu..\n");
                client = new ClientHandler(s, reader, writer);
                Thread t = client;
                clientList.add(client);
                t.start();
                
                
            }catch(Exception e){
                try {
                    s.close();
                } catch (IOException ex) {
                    Logger.getLogger(chat_server.class.getName()).log(Level.SEVERE, null, ex);
                }
                e.printStackTrace();
        
        }
        
        
    }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea msg_area;
    private javax.swing.JButton msg_send;
    private javax.swing.JTextField msg_text;
    // End of variables declaration//GEN-END:variables

    
    /*  --- evo primer, koristila sam oba moguca nacina za pravljenje niti u Javi   ---- */
    /* u Clinetu imamo klasu koja implementira Runnable interfejs   */
    /* a u Serveru klasu koja nasledjuje Thread klasu   */
    
    private static class ClientHandler extends Thread {

        final Socket s;
        /*prvo sam koristila DataOutputStream ali kako je postalo slozenije, morala sam da 
          predjem na BufferedReader */
        /*final DataOutputStream dout;
        final DataInputStream  din;*/
        BufferedReader reader;
        PrintWriter writer;
    
        public ClientHandler(Socket s, BufferedReader reader,  PrintWriter writer) {
    
          this.s = s;
          this.reader = reader;
          this.writer = writer;
    
    
        }
    
        public void run(){
    
            String stream = "";
            String[] data;
            String usern= "";
            //data[0] username
            //data[1] Connect/Disconnect/Chat
            //data[2] Message
            
                
            try {
                while ((stream = reader.readLine()) != null) {
                    System.out.println(stream);
                    data = stream.split(":");
                    usern = data[0];
                    switch (data[1]) {
                        case "Disconnect":
                            sendToAll(data[0]+":Disconnect"); //ako se neko diskonektovao, treba sve da obavesti o tome, da bi mogli da ga obrisu iz desnog tekstualnog polja
                            userRemove(new ClientHandler(s, reader, writer));
                            users.remove(data[0]); 
                            msg_area.setText(msg_area.getText().trim()+"\n"+data[0]+": "+data[1]+"\n");
                            break;
                        case "Connect":
                            msg_area.setText(msg_area.getText().trim()+"\n"+data[0]+": "+data[1]+"\n");
                            sendToAll(data[0]+":Connect");
                            users.add(data[0]);
                            break;
                        case "Chat":
                            msg_area.setText(msg_area.getText().trim()+"\n"+data[0]+": "+data[2]+"\n");
                            //sendToAll(data[0]+":Chat:"+data[2]);
                            break;
                        default:
                            break;
                    }
                    
                    /*znaci ovde recimo dokle god se nesto desava stalno salji izmene , tj trenutne konekcije u obliku nekog stringa **/
                    String buff = "" ;
                    for(String usr : users){
                        System.out.println("* "+usr+"\n");
                        buff = buff + "* "+ usr + ";";
                    }
                    /* posalji taj string svima */
                    sendToAll(buff + ":Connected");
                    
                }
                } catch (Exception e) {
                    msg_area.append("Lost a connection. \n");
                  
                
                }
                
            //msg_area.setText(msg_area.getText().trim()+"\n"+stream+"\n");
            
    }
        public void write(String message){
        
                
                writer.println(message);
                writer.flush(); // flushes the buffer
            
           
            
        }

        private static void userRemove(ClientHandler clientHandler) {
            
            clientList.remove(clientHandler);
            
        }
       
        
    }
    
    
}

